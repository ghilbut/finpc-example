// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: board.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoardClient is the client API for Board service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardClient interface {
	PostSubject(ctx context.Context, in *NewSubject, opts ...grpc.CallOption) (*Subject, error)
	DeleteSubject(ctx context.Context, in *SubjectId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSubjectList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SubjectList, error)
	PostQuestion(ctx context.Context, in *NewQuestion, opts ...grpc.CallOption) (*Question, error)
	DeleteQuestion(ctx context.Context, in *QuestionId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetQuestionList(ctx context.Context, in *SubjectId, opts ...grpc.CallOption) (*QuestionList, error)
	GetQuestion(ctx context.Context, in *QuestionId, opts ...grpc.CallOption) (*Question, error)
	LikeQuestion(ctx context.Context, in *QuestionId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LikeQuestionCancel(ctx context.Context, in *QuestionId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type boardClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardClient(cc grpc.ClientConnInterface) BoardClient {
	return &boardClient{cc}
}

func (c *boardClient) PostSubject(ctx context.Context, in *NewSubject, opts ...grpc.CallOption) (*Subject, error) {
	out := new(Subject)
	err := c.cc.Invoke(ctx, "/board.Board/PostSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) DeleteSubject(ctx context.Context, in *SubjectId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/board.Board/DeleteSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) GetSubjectList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SubjectList, error) {
	out := new(SubjectList)
	err := c.cc.Invoke(ctx, "/board.Board/GetSubjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) PostQuestion(ctx context.Context, in *NewQuestion, opts ...grpc.CallOption) (*Question, error) {
	out := new(Question)
	err := c.cc.Invoke(ctx, "/board.Board/PostQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) DeleteQuestion(ctx context.Context, in *QuestionId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/board.Board/DeleteQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) GetQuestionList(ctx context.Context, in *SubjectId, opts ...grpc.CallOption) (*QuestionList, error) {
	out := new(QuestionList)
	err := c.cc.Invoke(ctx, "/board.Board/GetQuestionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) GetQuestion(ctx context.Context, in *QuestionId, opts ...grpc.CallOption) (*Question, error) {
	out := new(Question)
	err := c.cc.Invoke(ctx, "/board.Board/GetQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) LikeQuestion(ctx context.Context, in *QuestionId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/board.Board/LikeQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) LikeQuestionCancel(ctx context.Context, in *QuestionId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/board.Board/LikeQuestionCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardServer is the server API for Board service.
// All implementations must embed UnimplementedBoardServer
// for forward compatibility
type BoardServer interface {
	PostSubject(context.Context, *NewSubject) (*Subject, error)
	DeleteSubject(context.Context, *SubjectId) (*emptypb.Empty, error)
	GetSubjectList(context.Context, *emptypb.Empty) (*SubjectList, error)
	PostQuestion(context.Context, *NewQuestion) (*Question, error)
	DeleteQuestion(context.Context, *QuestionId) (*emptypb.Empty, error)
	GetQuestionList(context.Context, *SubjectId) (*QuestionList, error)
	GetQuestion(context.Context, *QuestionId) (*Question, error)
	LikeQuestion(context.Context, *QuestionId) (*emptypb.Empty, error)
	LikeQuestionCancel(context.Context, *QuestionId) (*emptypb.Empty, error)
	mustEmbedUnimplementedBoardServer()
}

// UnimplementedBoardServer must be embedded to have forward compatible implementations.
type UnimplementedBoardServer struct {
}

func (UnimplementedBoardServer) PostSubject(context.Context, *NewSubject) (*Subject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSubject not implemented")
}
func (UnimplementedBoardServer) DeleteSubject(context.Context, *SubjectId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubject not implemented")
}
func (UnimplementedBoardServer) GetSubjectList(context.Context, *emptypb.Empty) (*SubjectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjectList not implemented")
}
func (UnimplementedBoardServer) PostQuestion(context.Context, *NewQuestion) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostQuestion not implemented")
}
func (UnimplementedBoardServer) DeleteQuestion(context.Context, *QuestionId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedBoardServer) GetQuestionList(context.Context, *SubjectId) (*QuestionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionList not implemented")
}
func (UnimplementedBoardServer) GetQuestion(context.Context, *QuestionId) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedBoardServer) LikeQuestion(context.Context, *QuestionId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeQuestion not implemented")
}
func (UnimplementedBoardServer) LikeQuestionCancel(context.Context, *QuestionId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeQuestionCancel not implemented")
}
func (UnimplementedBoardServer) mustEmbedUnimplementedBoardServer() {}

// UnsafeBoardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardServer will
// result in compilation errors.
type UnsafeBoardServer interface {
	mustEmbedUnimplementedBoardServer()
}

func RegisterBoardServer(s grpc.ServiceRegistrar, srv BoardServer) {
	s.RegisterService(&Board_ServiceDesc, srv)
}

func _Board_PostSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSubject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).PostSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.Board/PostSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).PostSubject(ctx, req.(*NewSubject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_DeleteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).DeleteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.Board/DeleteSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).DeleteSubject(ctx, req.(*SubjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_GetSubjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).GetSubjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.Board/GetSubjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).GetSubjectList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_PostQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewQuestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).PostQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.Board/PostQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).PostQuestion(ctx, req.(*NewQuestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.Board/DeleteQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).DeleteQuestion(ctx, req.(*QuestionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_GetQuestionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).GetQuestionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.Board/GetQuestionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).GetQuestionList(ctx, req.(*SubjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.Board/GetQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).GetQuestion(ctx, req.(*QuestionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_LikeQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).LikeQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.Board/LikeQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).LikeQuestion(ctx, req.(*QuestionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_LikeQuestionCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).LikeQuestionCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.Board/LikeQuestionCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).LikeQuestionCancel(ctx, req.(*QuestionId))
	}
	return interceptor(ctx, in, info, handler)
}

// Board_ServiceDesc is the grpc.ServiceDesc for Board service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Board_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "board.Board",
	HandlerType: (*BoardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostSubject",
			Handler:    _Board_PostSubject_Handler,
		},
		{
			MethodName: "DeleteSubject",
			Handler:    _Board_DeleteSubject_Handler,
		},
		{
			MethodName: "GetSubjectList",
			Handler:    _Board_GetSubjectList_Handler,
		},
		{
			MethodName: "PostQuestion",
			Handler:    _Board_PostQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _Board_DeleteQuestion_Handler,
		},
		{
			MethodName: "GetQuestionList",
			Handler:    _Board_GetQuestionList_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _Board_GetQuestion_Handler,
		},
		{
			MethodName: "LikeQuestion",
			Handler:    _Board_LikeQuestion_Handler,
		},
		{
			MethodName: "LikeQuestionCancel",
			Handler:    _Board_LikeQuestionCancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "board.proto",
}
