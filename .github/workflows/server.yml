name: Deploy server

on:
  push:
    paths:
      - .github/workflows/server.yml
      - server/**
  workflow_dispatch:

jobs:
  build:
    if: vars.DISABLE_GITHUB_ACTIONS != 'true'
    runs-on: ubuntu-latest
    env:
      WORKDIR: ./server

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to AWS ECR
      id:   ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get docker metadata
      id:   meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.ecr.outputs.registry }}/server
        tags: |
          type=sha,prefix=,suffix=-{{date 'YYYYMMDD-HHmmss' tz='Asia/Seoul'}}
        flavor: |
          latest=true

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ./server
        push:    true
        tags:    ${{ steps.meta.outputs.tags }}
        labels:  ${{ steps.meta.outputs.labels }}

    - name: Get AWS ECS task definition
      run:  |
        aws ecs describe-task-definition \
            --task-definition finpc-server \
            --query taskDefinition > task-definition.json
      working-directory: ${{ env.WORKDIR }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id:   task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: server/task-definition.json
        container-name: server
        image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: server
        cluster: finpc
        wait-for-service-stability: true
